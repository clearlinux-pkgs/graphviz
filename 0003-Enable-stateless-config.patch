From 0e7502466e33f6e0ebcd467dde46d6a07dedd8a3 Mon Sep 17 00:00:00 2001
From: "Brett T. Warden" <brett.t.warden@intel.com>
Date: Wed, 18 Oct 2023 10:24:23 -0700
Subject: [PATCH] Enable stateless config

dot will read from /usr/share/graphviz/config6 if
/var/lib/graphviz/config6 does not exist.
Environment GV_CONFIG_PATH may be set to override the path where the
config file may be found/written.
---
 cmake/configure_plugins.cmake.in |  3 +++
 lib/gvc/gvconfig.c               | 31 ++++++++++++++++++++++++++-----
 2 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/cmake/configure_plugins.cmake.in b/cmake/configure_plugins.cmake.in
index d0c8f0f95f16..3cfd52db9706 100644
--- a/cmake/configure_plugins.cmake.in
+++ b/cmake/configure_plugins.cmake.in
@@ -35,6 +35,9 @@ elseif(UNIX)
   set(ENV{LD_LIBRARY_PATH} "${ROOT}/@LIBRARY_INSTALL_DIR@")
 endif()
 
+# Store this initial copy of the config6 plugin in the stateless fallback location
+set(ENV{GV_CONFIG_PATH} "$ENV{DESTDIR}/usr/share/graphviz")
+
 execute_process(
   COMMAND ${ROOT}/bin/dot -c
   COMMAND_ERROR_IS_FATAL ANY
diff --git a/lib/gvc/gvconfig.c b/lib/gvc/gvconfig.c
index 92f27f356d56..ef5273506320 100644
--- a/lib/gvc/gvconfig.c
+++ b/lib/gvc/gvconfig.c
@@ -29,6 +29,10 @@
 #include <util/exit.h>
 #include <util/gv_fopen.h>
 
+/* stateless */
+#include <errno.h>
+#define STATELESS_CONFIG_DIR "/usr/share/graphviz"
+
 #ifdef ENABLE_LTDL
 #ifdef HAVE_DL_ITERATE_PHDR
 #include <link.h>
@@ -535,6 +539,8 @@ void gvconfig(GVC_t * gvc, bool rescan)
     char *config_text = NULL;
     char *libdir;
     char *config_file_name = GVPLUGIN_CONFIG_FILE;
+    char *env_config_path = NULL;
+    char *read_config_path = NULL;
 
 #endif
     
@@ -550,6 +556,16 @@ void gvconfig(GVC_t * gvc, bool rescan)
     	    /* if we fail to stat it then it probably doesn't exist so just fail silently */
 	    goto done;
         }
+
+	/* stateless: allow overriding config path with environment variable */
+	if (env_config_path = getenv("GV_CONFIG_PATH")) {
+	    agxbuf xb = {0};
+	    agxbprint(&xb, "%s%s%s", env_config_path, DIRSEP, config_file_name);
+	    if(gvc->config_path) {
+		free(gvc->config_path);
+	    }
+	    gvc->config_path = agxbdisown(&xb);
+	}
     
         if (! gvc->config_path) {
             agxbuf xb = {0};
@@ -568,25 +584,30 @@ void gvconfig(GVC_t * gvc, bool rescan)
     
         /* load in the cached plugin library data */
     
-        rc = stat(gvc->config_path, &config_st);
+	read_config_path = gvc->config_path;
+	rc = stat(read_config_path, &config_st);
+        if (rc == -1 && ENOENT == errno) {
+	    read_config_path = STATELESS_CONFIG_DIR "/" GVPLUGIN_CONFIG_FILE;
+	    rc = stat(read_config_path, &config_st);
+	}
         if (rc == -1) {
     	    /* silently return without setting gvc->config_found = TRUE */
     	    goto done;
         }
         else {
-    	    f = gv_fopen(gvc->config_path, "r");
+    	    f = gv_fopen(read_config_path, "r");
     	    if (!f) {
-    	        agerrorf("failed to open %s for read.\n", gvc->config_path);
+    	        agerrorf("failed to open %s for read.\n", read_config_path);
 		return;
     	    }
     	    else if (config_st.st_size == 0) {
-    	        agerrorf("%s is zero sized.\n", gvc->config_path);
+    	        agerrorf("%s is zero sized.\n", read_config_path);
     	    }
     	    else {
     	        config_text = gv_alloc((size_t)config_st.st_size + 1);
     	        size_t sz = fread(config_text, 1, (size_t)config_st.st_size, f);
     	        if (sz == 0) {
-    	            agerrorf("%s read error.\n", gvc->config_path);
+    	            agerrorf("%s read error.\n", read_config_path);
     	        }
     	        else {
     	            gvc->config_found = true;
-- 
2.47.0

